/* eslint-disable */
import simLauncher from '../../joist/js/simLauncher.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = simLauncher.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBuffer = decodedAudio;
  wrappedAudioBuffer.loadedProperty.set( true );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBuffer = phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate );
  wrappedAudioBuffer.loadedProperty.set( true );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;